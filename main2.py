def screaming_filter(text):
    return text.upper()

def bored_filter(text):
    return text.lower() and "...".join(text.split())

def smile_filter(text):
    return "üôÇ".join(text.split())

def warning_filter(text):
    result = ""
    for word in text.split():
        result += word + "!"
    return result

def camel_filter(text):
    result = ""
    is_next_upper = False
    for i in range(len(text)):
        if text[i] == " ":
            is_next_upper = True
        elif is_next_upper:
            result += text[i].upper()
            is_next_upper = False
        else:
            result += text[i]
    return result


def vowel_letters(text):
    text1 = []
    for i in range(len(text)):
        if text[i] == "–æ" or text[i] == "–∞" or text[i] == "—É" or text[i] == "—ç" or text[i] == "—é" or text[i] == "—è" or text[i] == "—ã" or text[i] == "–µ" or text[i] == "—ë" or text[i] == "–∏":
            text1.append(text[i])
    return text1

def word_2016_filter(text):
    return "-".join(text.split())


filters = {
    1: {"name": "–ö–†–ò–ß–ê–©–ò–ô –§–ò–õ–¨–¢–†",
    "description": "–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Å–µ –±—É–∫–≤—ã —Å–ª–æ–≤ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä",
    "function": screaming_filter
        },

    2: {"name": "—É—Å—Ç–∞–≤—à–∏–π...—Ñ–∏–ª—å—Ç—Ä...",
        "description": "–°—Ç–∞–≤–∏—Ç —Ç—Ä–æ–µ—Ç–æ—á–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤",
        "function": bored_filter
        },
    3: {"name": "–£–ª—ã–±–∞—é—â–∏–π—Å—è —Ñ–∏–ª—å—Ç—ÄüôÇ",
        "description": "–°—Ç–∞–≤–∏—Ç —Å–º–∞–π–ª–∏–∫ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤",
        "function": smile_filter
        },
    4: {"name": "!–§–ò–õ–¨–¢–†!–¢–†–ï–í–û–ì–ò!",
        "description": "–°—Ç–∞–≤–∏—Ç –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤ —Å–ª–æ–≤–∞ –∏ –≤–æ–∑–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –æ—â—É—â–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "function": warning_filter
        },
    5: {"name": "camel_",
        "description": "–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç CamelCase",
        "function": camel_filter
        },
    6: {"name": "-word-2016-filter-",
        "description": "–°—Ç–∞–≤–∏—Ç –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ —Ç–∏—Ä–µ, –ø—Ä–∏–¥–∞–≤–∞—è —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –≤ word2016",
        "function": word_2016_filter
        },
    7: {"name": "—Ç–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã",
        "description": "–û—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∏—Ö –±—É–∫–≤",
        "function": vowel_letters
        }
    }


print("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞:")

for key, value in filters.items():
    print(key, value["name"])
print("0: –í—ã—Ö–æ–¥.")

filter_choice = None
while filter_choice not in filters:
    filter_choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã:"))
    if filter_choice == 0:
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        exit()

filter_name = filters[filter_choice]["name"]
filter_description = filters[filter_choice]["description"]

print(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä: {filter_name}")
print(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}: {filter_description} \n"
      )

text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
fil_text = filters[filter_choice]["function"](text)
print()
print(f"–û—Ç–ª–∏—á–Ω–æ! –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {text} –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.\n"

            )
if fil_text:
    answer = input(f"–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä {filter_name} –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É? (–î–∞ –∏–ª–∏ –ù–µ—Ç) ")

    if answer.lower() == "–¥–∞":
        fil_text = filters[filter_choice]["function"](fil_text)
        if fil_text:
            print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {fil_text} ")

    if answer.lower() == "–Ω–µ—Ç":
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        print("–î–æ—Å–≤–∏–¥–∞–Ω–∏—è")
